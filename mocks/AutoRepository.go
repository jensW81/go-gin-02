// Code generated by MockGen. DO NOT EDIT.
// Source: AutoRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "golang.source-fellows.com/seminar/go-gin/v2"
)

// MockAutoRepository is a mock of AutoRepository interface.
type MockAutoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAutoRepositoryMockRecorder
}

// MockAutoRepositoryMockRecorder is the mock recorder for MockAutoRepository.
type MockAutoRepositoryMockRecorder struct {
	mock *MockAutoRepository
}

// NewMockAutoRepository creates a new mock instance.
func NewMockAutoRepository(ctrl *gomock.Controller) *MockAutoRepository {
	mock := &MockAutoRepository{ctrl: ctrl}
	mock.recorder = &MockAutoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAutoRepository) EXPECT() *MockAutoRepositoryMockRecorder {
	return m.recorder
}

// AddAuto mocks base method.
func (m *MockAutoRepository) AddAuto(ctx context.Context, auto v2.Auto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuto", auto)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAuto indicates an expected call of AddAuto.
func (mr *MockAutoRepositoryMockRecorder) AddAuto(auto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuto", reflect.TypeOf((*MockAutoRepository)(nil).AddAuto), auto)
}

// GetAllAuto mocks base method.
func (m *MockAutoRepository) GetAllAuto(context.Context) ([]v2.Auto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAuto")
	ret0, _ := ret[0].([]v2.Auto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAuto indicates an expected call of GetAllAuto.
func (mr *MockAutoRepositoryMockRecorder) GetAllAuto() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAuto", reflect.TypeOf((*MockAutoRepository)(nil).GetAllAuto))
}
